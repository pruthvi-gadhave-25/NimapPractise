using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

namespace IEnumVsIQuery
{
    internal class Program
    {

        //IEnumerable - it fetch data and hen filter 
        //IQueryable - it will filter data on Database side and then  fetch 
        static void Main(string[] args)
        {
            List<int> numbers = new List<int> { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 } ;

            IEnumerable<int> enumerables = numbers.Where(n => n > 5);

            foreach(int i in enumerables)
            {
                Console.WriteLine(i);
            }

            Console.WriteLine("Iqeryable : ");
            IQueryable<int> queryList = numbers.AsQueryable().Where(n => n > 5);

            foreach (int i in queryList)
            {
                Console.WriteLine(i);
            }

            //using (StudentDBContext DBContext = new StudentDBContext())
            //{
            //    //To See What SQL Generated By Entity Framework
            //    DBContext.Database.Log = Console.Write;
            //    //Fetch the Top 2 Records from the Students Database table where Gender = Male
            //    IEnumerable<Student> listStudents = DBContext.Students.Where(x => x.Gender == "Male");
            //    listStudents = listStudents.Take(2);
            //    Console.WriteLine("Top 2 Student Where Gender = Male");
            //    foreach (var std in listStudents)
            //    {
            //        Console.WriteLine(std.FirstName + " " + std.LastName);
            //    }
            //}

        }
    }
}

//   https://www.scholarhat.com/tutorial/linq/ienumerable-vs-iqueryable
//IEnumerable is suitable for LINQ to Object and LINQ to XML queries.
//IEnumerable is best for querying data from in-memory collections like List, Array, etc.
//IEnumerable doesn’t support lazy loading. Hence not suitable for paging-like scenarios.

//IQueryable is best for querying data from out-memory (like remote database, service) collections.
//While querying data from a database, IQueryable executes the select query on the server side with all filters.
//IQueryable supports lazy loading. Hence it is suitable for paging-like scenarios
